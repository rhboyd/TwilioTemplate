AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    Twilio SMS to SNS

Resources:
    RestAPI:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: "Twilio SMS to SNS API"
    Message:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: !GetAtt RestAPI.RootResourceId
        PathPart: "message"
        RestApiId: !Ref RestAPI
    Subscribe:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: !GetAtt RestAPI.RootResourceId
        PathPart: "subscribe"
        RestApiId: !Ref RestAPI
    SubscribeOptionsMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        AuthorizationType: NONE
        RestApiId:
          Ref: RestAPI
        ResourceId:
          Ref: Subscribe
        HttpMethod: OPTIONS
        Integration:
          IntegrationResponses:
            - StatusCode: 200
              ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
                method.response.header.Content-Type: "'application/json'"
              ResponseTemplates:
                application/json: ''
          PassthroughBehavior: WHEN_NO_MATCH
          RequestTemplates:
            application/json: '{"statusCode": 200}'
          Type: MOCK
        MethodResponses:
          - StatusCode: 200
            ResponseModels:
              application/json: 'Empty'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: false
              method.response.header.Access-Control-Allow-Methods: false
              method.response.header.Access-Control-Allow-Origin: false
              method.response.header.Content-Type: false
    OptionsMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        AuthorizationType: NONE
        RestApiId:
          Ref: RestAPI
        ResourceId:
          Ref: Message
        HttpMethod: OPTIONS
        Integration:
          IntegrationResponses:
            - StatusCode: 200
              ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
                method.response.header.Content-Type: "'application/json'"
              ResponseTemplates:
                application/json: ''
          PassthroughBehavior: WHEN_NO_MATCH
          RequestTemplates:
            application/json: '{"statusCode": 200}'
          Type: MOCK
        MethodResponses:
          - StatusCode: 200
            ResponseModels:
              application/json: 'Empty'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: false
              method.response.header.Access-Control-Allow-Methods: false
              method.response.header.Access-Control-Allow-Origin: false
              method.response.header.Content-Type: false
    PutMessageMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        HttpMethod: POST
        ResourceId: !Ref Message
        RestApiId: !Ref RestAPI
        AuthorizationType: NONE
        RequestParameters:
          method.request.querystring.TargetArn: true
          method.request.querystring.Version: true
          method.request.querystring.Message: false
          method.request.querystring.Body: true
          method.request.header.Content-Type: true
        MethodResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true
              method.response.header.Access-Control-Allow-Headers: true
              method.response.header.Content-Type: true
            StatusCode: 200
        Integration:
          Type: AWS
          IntegrationHttpMethod: POST
          Credentials:
            Fn::GetAtt:
              - SNSPublishPermission
              - Arn
          Uri: !Sub "arn:aws:apigateway:${AWS::Region}:sns:action/Publish"
          RequestParameters:
            integration.request.querystring.TargetArn: !Sub
              - "'${targetArn}'"
              - targetArn:
                 !Ref TwilioSMS
            integration.request.querystring.Version: "'2010-03-31'"
            integration.request.header.Content-Type: "'application/json'"
          RequestTemplates:
            application/x-www-form-urlencoded: |
              #set( $from = "<N/A>" )
              #set( $to = "<N/A>" )
              #set( $body = "<N/A>" )
              #foreach( $token in $input.path('$').split('&') )
                  #set( $keyVal = $token.split('=') )
                  #set( $keyValSize = $keyVal.size() )
                  #if( $keyValSize >= 1 )
                    #set( $key = $util.urlDecode($keyVal[0]) )
                    #set( $val = "" )
                    #if( $keyValSize >= 2 )
                        #set( $val = $util.urlDecode($keyVal[1]) )
                    #end
                    #if( $key == "From" )
                        #set( $from = "${val}" )
                    #end
                    #if( $key == "To" )
                        #set( $to = "${val}" )
                    #end
                    #if( $key == "Body" )
                        #set( $body = "${val}" )
                    #end
                  #end
              #end
              #set( $message = "From: ${from}
              To: ${to}
              
              ${body}")
              #set($context.requestOverride.querystring.Message = $message)
          IntegrationResponses:
            - StatusCode: 200
              ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
                method.response.header.Content-Type: "'application/xml'"
            - StatusCode: 500
    SubscribeMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        HttpMethod: POST
        ResourceId: !Ref Subscribe
        RestApiId: !Ref RestAPI
        AuthorizationType: AWS_IAM
        RequestParameters:
          method.request.querystring.TargetArn: true
          method.request.querystring.Version: true
          method.request.header.Content-Type: true
          method.request.querystring.smsNumber: true
        MethodResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true
              method.response.header.Access-Control-Allow-Headers: true
              method.response.header.Content-Type: true
            StatusCode: 200
        Integration:
          Type: AWS
          IntegrationHttpMethod: POST
          Credentials:
            Fn::GetAtt:
              - SNSPublishPermission
              - Arn
          Uri: !Sub "arn:aws:apigateway:${AWS::Region}:sns:action/Subscribe"
          RequestParameters:
            integration.request.querystring.TopicArn: !Sub
              - "'${targetArn}'"
              - targetArn:
                 !Ref TwilioSMS
            integration.request.querystring.Version: "'2010-03-31'"
            integration.request.header.Content-Type: "'application/json'"
            integration.request.querystring.Endpoint: "method.request.querystring.smsNumber"
            integration.request.querystring.Protocol: "'sms'"
          RequestTemplates:
            application/json: |
              {}
          IntegrationResponses:
            - StatusCode: 200
            - StatusCode: 500

    RestAPIdeployment:
      Type: AWS::ApiGateway::Deployment
      DependsOn:
        - PutMessageMethod
      Properties:
        Description: "Prod Stage for "
        RestApiId:
          Ref: RestAPI
        StageName: Prod

    SNSPublishPermission:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "apigateway.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Path: "/"
        Policies:
         - PolicyName: "publishToSNS"
           PolicyDocument:
             Version: "2012-10-17"
             Statement:
              - Effect: "Allow"
                Action:
                 - "sns:Publish"
                 - "sns:Subscribe"
                Resource: !Ref TwilioSMS

    TwilioSMS:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: "Twilio SMS"

    SNSPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Statement:
            Sid: "MYSID001"
            Effect: "Allow"
            Principal:
              Service: apigateway.amazonaws.com
            Action: sns:Publish
            Resource: !Ref TwilioSMS
        Topics:
          - !Ref TwilioSMS
